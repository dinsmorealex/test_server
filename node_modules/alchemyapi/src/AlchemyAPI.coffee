async = require 'async'

class AlchemyAPI
	get_token: (callback) ->
		@request
			jar: @jar
			uri: 'http://demo1.alchemyapi.com/language.php'
			method: 'GET'
			followAllRedirects: false
			headers:
				'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
				'Accept-Encoding':'sdch'
				'Accept-Language':'en-US,en;q=0.8,da;q=0.6,is;q=0.4'
				'Cache-Control':'max-age=0'
				'Connection': 'keep-alive'
				'DNT':1
				Host: 'demo1.alchemyapi.com'
				Referer: 'http://www.alchemyapi.com/products/demo/alchemylanguage/'
				'User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.114 Safari/537.36'
			,(error, res, body) =>
				@CSRF = body.split("var csrf_token = '").pop().split("';").shift()
				callback and callback(error)
				
	do_process: (item, callback) ->
		@get_token =>
			data = {}
			async.waterfall([
				(next) =>
					@request({
							url: 'http://demo1.alchemyapi.com/cgi/api/analyze.php',
							method: 'POST',
							jar: @jar,
							headers: {
								Origin: 'http://demo1.alchemyapi.com',
								Referer: 'http://demo1.alchemyapi.com/language.php',
								'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.114 Safari/537.36',
								'X-Requested-With': 'XMLHttpRequest',
								'Host': 'demo1.alchemyapi.com'
							},
							form: {
								'endpoints[0][endpoint]':'entities',
								'endpoints[0][apiUrl]':'/text/TextGetRankedNamedEntities',
								'endpoints[0][showSourceText]':1,
								'endpoints[0][sentiment]':1,
								'endpoints[0][quotations]':1,
								'endpoints[0][maxRetrieve]':50,
								'endpoints[1][endpoint]':'keywords',
								'endpoints[1][apiUrl]':'/text/TextGetRankedKeywords',
								'endpoints[1][sentiment]':1,
								'endpoints[1][showSourceText]':1,
								'endpoints[1][maxRetrieve]':50,
								'endpoints[2][endpoint]':'category',
								'endpoints[2][apiUrl]':'/text/TextGetRankedTaxonomy',
								'endpoints[2][showSourceText]':1,
								'endpoints[3][endpoint]':'concepts',
								'endpoints[3][apiUrl]':'/text/TextGetRankedConcepts',
								'endpoints[4][endpoint]':'sentiment',
								'endpoints[4][apiUrl]':'/text/TextGetTextSentiment',
								'endpoints[5][endpoint]':'relations',
								'endpoints[5][apiUrl]':'/text/TextGetRelations',
								'endpoints[5][entities]':1,
								'endpoints[5][requireEntities]':1,
								'endpoints[5][keywords]':1,
								'endpoints[5][sentiment]':1,
								'endpoints[6][endpoint]':'language',
								'endpoints[6][apiUrl]':'/text/TextGetLanguage',
								'endpoints[7][endpoint]':'title',
								'endpoints[7][apiUrl]':'',
								'endpoints[8][endpoint]':'author',
								'endpoints[8][apiUrl]': '',
								'endpoints[9][endpoint]':'text',
								'endpoints[9][apiUrl]': '',
								'endpoints[9][extractLinks]':1,
								'endpoints[10][endpoint]':'feeds',
								'endpoints[10][apiUrl]':'',
								'endpoints[11][endpoint]':'microformats',
								'endpoints[11][apiUrl]':'',
								content: item.text,
								contentType: 'text',
								text: item.text,
								'csrf_token': @CSRF 
							}
						}, next)
				,(res, body, next) =>
					try 
						_data = JSON.parse(body)
						async.map Object.keys(_data), (key, _next) =>
							_next null, _data[key]
						,(E, items) =>
							async.each items, (raw, _next) =>
								try 
									item = JSON.parse(raw)
									data[item.endpoint] = item.data[item.endpoint]
									_next null
								catch error
									_next error
							,next

					catch error
						next(error)
				], (error) =>
					callback error, data
				)



	constructor: (concurrency = 2, default_request = {}) ->
		@request = (require 'request').defaults(default_request)
		@jar = (require 'request').jar()
		@internal_queue = async.priorityQueue (item, cb) =>
			@do_process item, cb
		, concurrency
		@internal_queue.pause()
		@get_token =>
			@internal_queue.resume()

	text: (text, callback, priority = 0) ->
		@internal_queue.push 
			text: text
		,priority,callback

module.exports = AlchemyAPI
